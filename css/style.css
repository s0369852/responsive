@charset "utf-8";

/* 반응형은 작업을 할때 섹션 하나 하나마다 하는게 좋다.
    나중에 한번에 코딩하려고 하면 오류가 났을 때 어디서 났는지가 찾기 어려워 지기 때문.
*/

/* 컨테이너 */
.container {
    margin: 0 auto;
    position: relative;
    width: 1200px;
    /* background: rgba(0,0,0,.3); */
}

/* 레이아웃 */
body {background: url(../img/header_bg.jpg) repeat-x center top;}
/* #header {} => 반응형 할 때 height값을 빼주려고 auto로 놨기 때문에 배경까지 지워진 걸 볼 수 있다.
                배경을 보이게 하려면 background를 boay로 옮겨주면 된다.
*/
#nav {background-color: #f6fdff;}
#title {background-color: #eaf7fd;} 
#contents .container {
    border-left: 1px solid #dbdbdb;
    border-right: 1px solid #dbdbdb;
}
#content_left {
    /* margin-top: 10px; => 구역이 제대로 잡히나 확인하기 위한 것. */
    float: left;
    width: 250px;
    /* height: 1000px;
    background-color: #cccccc; => 구역이 제대로 잡히나 확인하기 위한 것. */
}
#content_center {
    overflow: hidden;
    margin-right: 250px;
    min-height: 1300px;
    border-left: 1px solid #dbdbdb;
    border-right: 1px solid #dbdbdb;
}
/* 가운데의 있는 컨텐츠만 크기 조절을 하기 위해서는 좌우의 컨텐츠에는 고정값이 필요.
    여기서 모두 다 "%"로 작업을 하면 안된다. 그럼 화면이 줄어들면서 화면 크기에 맞춰서 비율로 같이 줄어들이 때문. */
/* 좌우 컨텐츠의 margin-top값을 줘서 확인을 해보면 center의 영역이 좌우를 침범한 것을 볼 수 있다.
    이렇게 되면 반응형의 의미가 없어저 버린 것을 확인 할 수 있다. (왼쪽은 왼쪽, 가운데는 가운데, 오른쪽은 오른쪽 => 정해진 구역에 있어야 한다.)
    이때 오른쪽 영역은 "#content_center"에다가 marigin-right값을 주면 해결이 된다. (오른쪽 컨텐츠의 너비인 250px을 주면 된다.)
    왼쪽 영역은 float: left를 사용하였는데, 제대로 먹히지가 않아서 가운데 영역이 침범한 것을 볼 수 있다.
    따라서 "#content_center"에다가 overflow: hidden을 주게 되면 해결이 된다.
*/
#content_right {
    /* margin-top: 10px; => 구역이 제대로 잡히나 확인하기 위한 것. */
    position: absolute;
    top: 0;
    right: 0;
    /* 컨텐츠의 값을 고정시키기 위해서 여기에 position: absolute를 줬다. 
        이때 기준점은 #contents가 아닌 #contents > .container인 .container에 position: relative를 준다. */
    width: 250px;
    /* height: 1000px;
    background-color: #dddddd; => 구역이 제대로 잡히나 확인하기 위한 것. */
}
#footer {border-top: 1px solid #dbdbdb;}

/* 헤더 메뉴 */
.header {height: 327px;}
.header_menu {text-align: right;}
.header_menu a {
    display:inline-block;
    padding: 8px 0 6px 10px;
    font-family: 'Abel', sans-serif;
    color: #ffffff;
    transition: color 0.3s ease;
    -webkit-transition: color 0.3s ease;
    -moz-transition: color 0.3s ease;
    -ms-transition: color 0.3s ease;
    -o-transition: color 0.3s ease;
    /*CSS3에서주로사용되는기능은trasition.transition: color 0.3s ease;
    =>color값을0.3초동안ease효과를사용하여바꿔라.*/
}
 /* inline구조에서는 상하값이 안먹힌다.(margin, padding) -> display: inline-block; */
.header_menu a:hover {color: #ccc;}

/* 헤더 타이틀 */
.header_title {
    margin-top: 55px;
    text-align: center;
    font-family: 'Abel', sans-serif;
}
.header_title h1 {
    padding: 5px 30px 5px 30px;
    display: inline-block;
    font-size: 30px;
    text-transform: uppercase;
    letter-spacing: 2px;
    font-weight: 900;
    color: #ffffff;
    background: #51b0dc;
    transition: box-shadow 0.3s ease-in-out;
    -webkit-transition: box-shadow 0.3s ease-in-out;
    -moz-transition: box-shadow 0.3s ease-in-out;
    -ms-transition: box-shadow 0.3s ease-in-out;
    -o-transition: box-shadow 0.3s ease-in-out;
    /*transition은 ":hover"가 아닌 원본에다가 효과를 준다.*/
    /*transition: transition-property | transition-duration | transition-timing-function | transition-delay */    
    /*         
    transition-property => transition의 적용 여부를 정의. (적용 하고자 하는 속성값)
    transition-duration => 요소의 움직임의 지속시간을 정의.        
    transition-timing-function => 요소의 움직임 기능을 정의.         
    transition-delay => 요소의 움직임의 시간을 지연시킨다.     
    */
}
.header_title h1:hover {
    box-shadow:
        inset -9em 0 0 0 #257fac,
        inset 9em 0 0 0 #257fac
        /* box-shadow : none | h-shadow(수평) | v-shadow(수직) | blur | spread | color | inset */
        /* inset => 내부 그림자 생성. "%"단위는 먹지 않는다. 반응형이기 때문에 em,rem 등의 상대적인 단위로 나타내준다. */
        /* 반응형에서 가장 중요한 것은 상대적인 단위로 표현하는 것이다. px보다는 %나, em, rem 등. */
}
/* css3부터는 속성을 2개 이상 주고 싶으면 ","를 이용해서 작업할 수 있다. */
.header_title a {
    margin-top: -7px;
    padding: 10px 20px 10px 20px;
    display: inline-block;
    font-size: 16px;
    color: #ffffff;
    background: #4a9abf;
    transition: box-shadow 0.5s ease-in-out;
    -webkit-transition: box-shadow 0.5s ease-in-out;
    -moz-transition: box-shadow 0.5s ease-in-out;
    -ms-transition: box-shadow 0.5s ease-in-out;
    -o-transition: box-shadow 0.5s ease-in-out;
}
.header_title a:hover {
    box-shadow:
    0 0 0 5px rgba(75,154,191,.9) inset,
    0 0 0 100px rgba(0,0,0,.1) inset
    /* inset은 앞에다가 쓸 수도 있고, 뒤에다가 쓸 수도 있다. */
}

/* 헤더 아이콘 */
.header_icon {
    margin-top: 40px;
    padding-bottom: 45px;
    text-align: center;
}
.header_icon ul li {
    margin: 0 2px; 
    display: inline;
}
.header_icon ul li a {
    position: relative;
    display: inline-block;
    width: 60px;
    height: 60px;
    font-size: 35px;
    line-height: 60px;
    color: #ffffff;
    background: #3192bf;
    border-radius: 50%;
    -webkit-border-radius: 50%;
    -moz-border-radius: 50%;
    -ms-border-radius: 50%;
    -o-border-radius: 50%;
    transition: all 0.3s ease;
    -webkit-transition: all 0.3s ease;
    -moz-transition: all 0.3s ease;
    -ms-transition: all 0.3s ease;
    -o-transition: all 0.3s ease;
}
.header_icon ul li a:hover {
    font-size: 36px;
    box-shadow: 
        0 0 0 3px rgba(75,154,191,.9) inset,
        0 0 0 100px rgba(0,0,0,.1) inset;
}
.header_icon ul li a span {
    opacity: 0;
    padding: 4px 9px;
    position: absolute;
    top: -45px;
    left: 50%;
    font-size: 12px;
    line-height: 1.6;
    background: #3192bf;
    border-radius: 6px 0;
    transform: translateX(-50%);
    -webkit-transform: translateX(-50%);
    -moz-transform: translateX(-50%);
    -ms-transform: translateX(-50%);
    -o-transform: translateX(-50%);
    transition: all 0.5s ease;
    -webkit-transition: all 0.5s ease;
    -moz-transition: all 0.5s ease;
    -ms-transition: all 0.5s ease;
    -o-transition: all 0.5s ease;
}
/* transform으로 가운데 정렬 하는 방법.
    => x축(left, right)과 y(top, bottom)축을 기준으로, 움직인 위치와 반대로(음수값) 적용하면 된다. */
.header_icon ul li a span::before {
    content: '';
    position: absolute;
    left: 50%;
    bottom: -5px;
    margin-left: -5px;
    /* border값으로 삼각형을 만들어 줬는데 5px로 만들었으니까 다시 -5px을 줘서 중간으로 자리를 움직이게 한다. */
    border-top: 5px solid #3192bf;
    border-left: 5px solid transparent;
    border-right: 5px solid transparent;
}
.header_icon ul li a:hover span{
    opacity: 1;
    top: -35px;
}

/* 전체 메뉴 */
.nav {
    display: none;
    overflow: hidden;
    padding: 25px 0;
}
.nav h3 {
    margin-bottom: 4px;
    font-size: 18px;
    font-weight: bold;
    color: #25a2d0;
}
.nav > div {
    float: left;
    width: 40%;
}
.nav .nav_right {width: 20%;}
/* = .nav > div:last-child {width: 20%;} */
.nav ol {overflow: hidden;}

.nav li {
    position: relative;
    float: left;
    padding-left: 8px; 
    width: 50%;
    box-sizing: border-box;
}
.nav .nav_right li {width: 100%;}
/* = .nav > div:last-child li {width: 100%;} */
/* HTML5에서는 가상선택자를 많이 사용하기 때문에 많이 알아둘 필요가 있다. */
.nav li::before {
    content: '';
    position: absolute;
    top: 8px;
    left: 0;
    width: 3px;
    height: 3px;
    background-color: #25a2d0;
    border-radius: 50%;
    -webkit-border-radius: 50%;
    -moz-border-radius: 50%;
    -ms-border-radius: 50%;
    -o-border-radius: 50%;
}
.nav li a {position: relative;}
.nav li a::after {
    content:'';
    position: absolute;
    left: 0;
    bottom: 0;
    width: 0;
    height: 2px;
    background-color: #25aad0;
    transition: all .2s ease-out;
    -webkit-transition: all .2s ease-out;
    -moz-transition: all .2s ease-out;
    -ms-transition: all .2s ease-out;
    -o-transition: all .2s ease-out;
}
.nav li:hover a::after {width: 100%;}

/* 타이틀 */
.title {
    position: relative;
    text-align: center;
}
.title h2 {
    padding: 5px 0;
    font-size: 39px;
    font-family: 'Yeon Sung', cursive;
    color: #0093bd;
}
.title .btn {
    position: absolute;
    top: 5px;
    right: 0;
    width: 60px;
    height: 60px;
    line-height: 60px;
    font-size: 35px;
    color: #ffffff;
    background-color: #3192bf;
    border-radius: 50%;
    -webkit-border-radius: 50%;
    -moz-border-radius: 50%;
    -ms-border-radius: 50%;
    -o-border-radius: 50%;
    transition: all .3s ease;
    -webkit-transition: all .3s ease;
    -moz-transition: all .3s ease;
    -ms-transition: all .3s ease;
    -o-transition: all .3s ease;
}
.title .btn:hover {
    box-shadow:
        0 0 0 3px rgba(75,154,191,.9) inset,
        0 0 0 100px rgba(0,0,0,.1) inset;
}

/* 컨텐츠 영역 */
.column {
    padding: 15px;
    border-bottom: 1px solid #dbdbdb;
}
.col_title {
    padding-bottom: 5px;
    font-size: 20px;
    color: #2f7fa6;
}
.col_description {
    margin-bottom: 15px;
    padding-bottom: 15px;
    line-height: 18px;
    color: #878787;
    border-bottom: 1px dashed #dbdbdb;
}
.column.col3 {border-bottom: 0;}
.column.col6 {border-bottom: 0;}
.column.col9 {border-bottom: 0;}
/* 한가지 태그에 여러 class가 있다면 css에서 처리할 때 class들을 전부 붙여서 써줘야 한다. 
    ex). class="column col1" => .column.col1 */

/* 첫번째 메뉴 */
.col1 .menu li {position: relative;}
.col1 .menu li a {
    display: block;
    padding: 10px;
    font-size: 16px;
    text-transform: uppercase;
    color: #878787;
    border-bottom: 1px solid #dbdbdb;
    transition: box-shadow .5s ease, background .5s ease;
    -webkit-transition: box-shadow .5s ease, background .5s ease;
    -moz-transition: box-shadow .5s ease, background .5s ease;
    -ms-transition: box-shadow .5s ease, background .5s ease;
    -o-transition: box-shadow .5s ease, background .5s ease;
}
/* a태그는 :hover효과시 pointer가 바뀌기 때문에, a태그에 작업을 해주는 것이 좋다. */
.col1 .menu li a:hover {
    color: #ffffff;
    background: rgba(36,130,174);
    box-shadow: inset 180px 0 0 0 rgba(36,130,174,.7);

}
.col1 .menu li a i {
    position: absolute;
    top: 15px;
    right: 10px;
}

/* 게시판 영역 */
.notice_title {
    padding-bottom: 5px;
    font-size: 14xp;
    color: #2f7fa6;
}
.notice {position: relative;}
.notice .more {
    position: absolute;
    top: 3px;
    right: 0;
    font-size: 10px;
    text-transform: uppercase;
    color: #878787;
    
}

.notice li {
    padding-left: 8px;
    margin-bottom: 5px;
    position: relative;
}

.notice li::before {
    content: '';
    position: absolute;
    top: 8px;
    left: 0;
    width: 3px;
    height: 3px;
    background: #449ce2;
    border-radius: 50%;
    -webkit-border-radius: 50%;
    -moz-border-radius: 50%;
    -ms-border-radius: 50%;
    -o-border-radius: 50%;
}

/* 한줄 효과 */
.notice1 li { 
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
} 

/* 두줄 효과 */
.notice2 li {
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 2;
    /* display: box는 새로나왔기 때문에, 아직은 벤더프리픽스를 써야한다. 그래서 -webkit이 붙었다.
    webkit은 webkit으로 만든 프로그램을 말하는데 대표적으로 chrome, whale이다. 
    -webkit-line-clamp: 2; => 2줄을 의미한다. 
    */
    max-height: 40px; /*IE버전은 display: -webkit-box가 호환이 안되기 때문에 설정해준 값. (이 이상은 안보이게 설정)*/
    overflow: hidden;
    text-overflow: ellipsis;
}



/* 미디어 쿼리 */
/* 화면 너비가 0 부터인 이유는 변수 상위의 변수를 계속 유지하기 때문이다. 
    화면 마다 변수가 바뀌면 0부터가 아니라 바뀐 변수 부터 시작이 된다. ex) 1025px ~ 1220px
*/
/* 화면 너비 0 ~ 1220px */
@media (max-width: 1220px) {
    .container {width: 100%;}
    .row {padding: 0 15px;}
    /* // 공통 */

    .title .btn {right: 5px;}
    /* // 타이틀 버튼 */

    #contents .container {border: 0;} /*border값도 스크롤바가 생기는 원인이 될 수 있다. 스크롤바가 생긴다면 border값도 확인해봐야 한다.*/
    /* 컨텐츠 영역 */
}

/* 화면 너비 0 ~ 1024px */
@media (max-width: 1024px) {
}

/* 화면 너비 0 ~ 960px */
@media (max-width: 960px) {
    .nav > div {
        float: none;
        width: 100%;
    }
    .nav ol {margin-bottom: 10px;}
    .nav .nav_right {width: 100%;}
    .nav li {width: 33.333%;}
    .nav .nav_right li {width: 33.333%;}
    /* // 전체 메뉴 */

    #content_center {
        margin-right: 0;
        border-right: 0;
    }
    /* 반응형이 되면 하단으로 내려와 width가 100%가 되기 때문에, 
        전체 페이지에서 가운데 컨텐츠가 우측의 컨텐츠를 침범하는 것을 막기위해 적용해줬던 margin-right를 없애준다. */
    #content_right {
        position: static; 
        /*반응형시 하단으로 붙는 구조 => position의 기본값은 static으로 넣어주고 width를 100% 준다. 내려갔으니 border값도 상단으로 다시준다.*/
        width: 100%;
        border-top: 1px solid #dbdbdb;
    }
    /* 컨텐츠 영역 */
}

/* 화면 너비 0 ~ 768px */
@media (max-width: 768px) {
    #content_left {
        float: none;
        width: 100%;
    }
    /* 왼쪽 영역의 float을 깨줘야 가운데 영역이 밑으로 내려간다. */
    #content_center {border-left: 0;}
    /* 컨텐츠 영역 */
}

/* 화면 너비 0 ~ 600px */
@media (max-width: 600px) {
    .header {height: auto;}
    /* height값을 깨주려면 값을 auto로 주면 된다. */
    .header_title {display: none;}
    .header_icon {display: none;}
    /* // 헤더 */

    .nav li {width: 50%;}
    .nav .nav_right li {width: 50%;}
    /* // 전체 메뉴 */

    .title .btn {display: none;}
    /* // 타이틀 버튼 */

    .column.col1 {
        padding: 0;
        border-bottom: 0;
    }
    .column.col1 .col_title {display:  none;}
    .column.col1 .col_description {display: none;}
    .column.col1 .menu ul {overflow: hidden;}
    .column.col1 .menu li {
        float: left;
        width: 33.333%;
        text-align: center;
        border-right: 1px solid #dbdbdb;
        box-sizing: border-box;
        /* border-right를 주고나면 1px씩 총 3px이 width값에 추가가 된다. 그렇게 되면 3등분해논 것이 깨지게 되는데,
            이때 box-sizing: border-box를 주게 되면, border값이 width값 안에 할당이 되므로 width값이 유지가 된다.*/
    }
    .column.col1 .menu li:nth-child(3n) {border-right: 0;}
    /* 너비가 3등분이 되면서 3번째와 6번째 오른쪽에 border값이 겹침이 일어나므로 겸침을 없애기 위해 nth-child로 3의 배수 번째에는 border-right값을 없앰. */
    .column.col1 .menu li a {
        color: #ffffff;
        text-shadow: 0 0 5px rgba(0, 0, 0, .7);
    }
    .column.col1 .menu li a:hover {
        box-shadow: none;
        background: rgba(36, 130, 174, .4);
    }
    .column.col1 .menu li i {display: none;}
    .column.col2 {background: #ffffff;}
    .column.col4 {border-top: 1px solid #dbdbdb;}
    /* // ㄴ */
}

/* 화면 너비 0 ~ 480px */
@media (max-width: 480px) {
}

/* 화면 너비 0 ~ 320px */
@media (max-width: 320px) {
    .nav li {width: 100%;}
    .nav .nav_right li {width: 100%;}
    /* 전체 메뉴 */
}







